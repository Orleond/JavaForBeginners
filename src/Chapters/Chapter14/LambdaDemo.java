package Chapters.Chapter14;
/**
 * Демонстрация двух простых лямбда-выражений
 */
public class LambdaDemo {
    public static void main(String[] args) {
        MyValue myVal;  // Объявление ссылки на интерфейс

        // Здесь лямбда-выражение - это просто константа.
        // При его назначении переменной myVal создается
        // экземпляр класса, в котором лямбда-выражение
        // реализует метод getValue() интерфейса MyValue
        myVal = () -> 98.6;

        // Вызвать метод getValue, предоставляемый ранее
        // назначенным лямбда-выражением
        System.out.println("Постоянное значение: " + myVal.getValue());

        // Создать параметризованное лямбда-выражение и
        // назначить его ссылке на экземпляр MyParamValue.
        // Это лямбда-выражение возвращает обратную величину
        // своего аргумента
        MyParamValue myPval = (n) -> 1.0 / n;

        // Вызвать метод getValue(v) посредством ссылки myPval
        System.out.println("Значение, обратное значению 4, равно " +
                myPval.getValue(4.0));
        System.out.println("Значение, обратное значению 8, равно " +
                myPval.getValue(8.0));

        // Лямбда-выражение должно быть совместимо с методом,
        // который определяется функциональным интерфейсом. Поэтому
        // приведенные ниже два фрагмента кода не будут работать.
        // myVal = () -> "three";   // Ошибка: тип String не совместим
                                    // с типом double!
        // myPval = () -> Math.random();    // Ошибка: требуется параметр!
    }
}
